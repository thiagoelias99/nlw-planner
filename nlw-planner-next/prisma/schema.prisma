// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  firstName         String   @default("") @map("first_name")
  lastName          String   @default("") @map("last_name")
  email             String   @unique
  isEmailVerified   Boolean  @default(false) @map("is_email_verified")
  confirmationToken String   @default("") @map("confirmation_token")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  Trips   Trip[]
  Invites Invites[]
  Links   Links[]

  @@index([email])
  @@map("users")
}

model Trip {
  id                String   @id @default(cuid())
  ownerEmail        String   @map("owner_email")
  destination       String
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  isTripVerified    Boolean  @default(false) @map("is_trip_verified")
  confirmationToken String   @map("confirmation_token")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  User    User      @relation(fields: [ownerEmail], references: [email], onUpdate: Cascade, onDelete: Cascade)
  Invites Invites[]
  Links   Links[]

  @@index([ownerEmail])
  @@map("trips")
}

model Invites {
  id           String       @id @default(cuid())
  tripId       String       @map("trip_id")
  guestEmail   String       @map("guest_email")
  inviteStatus InviteStatus @default(NOT_SENT) @map("invite_status")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at")

  Trip Trip @relation(fields: [tripId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User User @relation(fields: [guestEmail], references: [email], onUpdate: Cascade, onDelete: Cascade)

  @@index([tripId, guestEmail])
  @@map("invites")
}

enum InviteStatus {
  ACCEPTED
  REJECTED
  CANCELLED
  EXCLUDED
  PENDING
  NOT_SENT
}

model Links {
  id        String   @id @default(cuid())
  tripId    String   @map("trip_id")
  title     String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Trip   Trip    @relation(fields: [tripId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([tripId])
  @@map("links")
}
